101. Symmetric Tree

  Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

  Input: root = [1,2,2,3,4,4,3]
  Output: true

  Input: root = [1,2,2,null,3,null,3]
  Output: false

  Constraints:
    The number of nodes in the tree is in the range [1, 1000].
    -100 <= Node.val <= 100

  # Definition for a binary tree node.
  # class TreeNode
  #     attr_accessor :val, :left, :right
  #     def initialize(val = 0, left = nil, right = nil)
  #         @val = val
  #         @left = left
  #         @right = right
  #     end
  # end
  #########################
  # @param {TreeNode} left, right
  # @return {Boolean}
  def mirror?(left, right)
      if left.nil? && right.nil?
          return true
      elsif left.nil? || right.nil?
          return false
      elsif left.val != right.val
          return false
      else
          return mirror?(left.left, right.right) && mirror?(left.right, right.left)
      end
  end

  # @param {TreeNode} root
  # @return {Boolean}
  #   *Style note: Ruby style guides would prefer to call this
  #   def symmetric?(root)
  #   but the leetCode runner wouldn't be able to run it.
  def is_symmetric(root)
      return true if root.nil? || root.val.nil?

      return mirror?(root.left, root.right)
  end


104. Maximum Depth of Binary Tree

  Given the root of a binary tree, return its maximum depth.

  A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

  Example 1:
    Input: root = [3,9,20,null,null,15,7]
    Output: 3
  Example 2:
    Input: root = [1,null,2]
    Output: 2

  # Definition for a binary tree node.
  class TreeNode
    attr_accessor :val, :left, :right

    def initialize(val = 0, left = nil, right = nil)
      @val = val
      @left = left
      @right = right
    end
  end

  # @param {TreeNode} root
  # @return {Integer}
  def max_depth(root)
    return 0 if root.nil?

    left_depth = max_depth(root.left)
    right_depth = max_depth(root.right)

    return ([left_depth, right_depth].max + 1)
  end


523. Continuous Subarray Sum

  Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.

  A good subarray is a subarray where:
    - its length is at least two, and
    - the sum of the elements of the subarray is a multiple of k.
  Note that:
    - A subarray is a contiguous part of the array.
    - An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.

  #########################
  # Performant approach: Iterate over the Array once, calculate the current sum of the
  # elements we've seen so far, create a Hash with key-value pairs of the remainder
  # and the index of the current number. If the Hash already contains that remainder
  # and the distance between the current index and the index we last saw the remainder is > 1,
  # then return true because there's a subarray within the numbers we've iterated over
  # whose sum is divisible by k.
  #
  # @param {Integer[]} nums
  # @param {Integer} k
  # @return {Boolean}
  def check_subarray_sum(nums, k)
    # Create the remainders Hash with 0 => -1 key-value pair in case the number
    # at index 0 is divisible by k, since that would only be length 1.
    remainders = { 0 => -1 }
    sum = 0
    nums.each_with_index do |num, index|
      sum += num
      remainder = sum % k

      # If it's the first time we've seen this remainder, store it in the remainders Hash
      # { remainder: index_of_current_num }
      if remainders[remainder] == nil
        remainders[remainder] = index
      # If we've seen this remainder already, and the distance between the
      # current index and the index where we last saw that remainder is > 1
      # then return true.
      elsif index - remainders[remainder] > 1
        return true
      end
    end

    return false
  end

  #########################
  # Brute force: Try all subarrays of size at least two and return true if there's a
  # subarray divisible by k with no remainder or return false if we've reached the end.
  # But this solution is slow if the dataset is very large.
  #
  # @param {Integer[]} nums
  # @param {Integer} k
  # @return {Boolean}
  def check_subarray_sum(nums, k)
      # Iterate over each element num1 with its index
      nums.each_with_index do |num1, ind|
          # Return false if the current element is the last in the Array
          return false if ind == nums.length - 1
          # Set a sum value for the sum of the elements in the Array being evaluated
          sum = num1

          # Iterate over each element num2 after the current num1 element
          nums.drop(ind+1).each do |num2|
              # Set the sum of the current subarray
              sum += num2
              # Return true if the sum divided by k has no remainder
              # and is therefore a multiple of k.
              return true if sum % k == 0
          end
      end
  end


2404. Most Frequent Even Element

  Given an integer array nums, return the most frequent even element.

  If there is a tie, return the smallest one. If there is no such element, return -1.

  Examples:
    Input: nums = [0,1,2,2,4,4,1]           Output:  2
    Input: nums = [4,4,4,9,2,4]             Output:  4
    Input: nums = [29,47,21,41,13,37,25,7]  Output: -1

  #########################
  # @param {Integer[]} nums
  # @return {Integer}
  def most_frequent_even(nums)
    counts = {}
    most_frequent_even = -1

    nums.each do |num|
      # Fill the counts Hash with
      # keys of all the even numbers and
      # values of how frequently it appears.
      # e.g. Array nums = [0,1,2,2,4,4,1]
      # results in Hash counts = {0=>1, 2=>2, 4=>2}
      next unless num.even?
      counts[num].nil? ? counts[num] = 1 : counts[num] += 1

      # If this is the first even number we've seen OR
      # the even number is the most frequent OR
      # the even number is equally as frequent and smaller than the tracked even number,
      # then set the most frequent even number to this number.
      if most_frequent_even == -1 ||
        (counts[num] > counts[most_frequent_even]) ||
        (num < most_frequent_even && counts[num] == counts[most_frequent_even])
          most_frequent_even = num
      end
    end

    return most_frequent_even
  end


183. Customers Who Never Order

  Write an SQL query to report all customers who never order anything.

  Return the result table in any order.

  The query result format is in the following example.

  SQL Schema >

  Table: Customers

  +-------------+---------+
  | Column Name | Type    |
  +-------------+---------+
  | id          | int     |
  | name        | varchar |
  +-------------+---------+
  id is the primary key column for this table.
  Each row of this table indicates the ID and name of a customer.


  Table: Orders

  +-------------+------+
  | Column Name | Type |
  +-------------+------+
  | id          | int  |
  | customerId  | int  |
  +-------------+------+
  id is the primary key column for this table.
  customerId is a foreign key of the ID from the Customers table.
  Each row of this table indicates the ID of an order and the ID of the customer who ordered it.

  #########################
  # LeetCode posted solution using a subquery
  # Runtime 998 ms
  #   SELECT name AS Customers FROM customers
  #   WHERE customers.id NOT IN (
  #       SELECT customerId FROM orders
  #   );


  # My solution using a join
  # Runtime 447 ms
  SELECT name AS Customers FROM customers
  LEFT JOIN orders ON orders.customerId=customers.id
  WHERE orders.customerId IS NULL;

  # My solution has a faster runtime because joins are
  # more optimized than subqueries (at least in MYSQL.)


1004. Max Consecutive Ones III

  Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

  Example:
    Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
    Output: 10
    Explanation:  [0,0,1,1,X,X,1,1,1,X,1,1,0,0,0,1,1,1,1]
    Numbers were flipped from 0 to X to show the longest subarray.

  Constraints:
    1 <= nums.length <= 105
    nums[i] is either 0 or 1
    0 <= k <= nums.length

  #########################
  # @param {Integer[]} nums
  # @param {Integer} k
  # @return {Integer}
  def longest_ones(nums, k)
      # Return a helpful String if an error check fails
      return "nums Array isn't the correct length" unless 1 <= nums.length && nums.length <= 10**5
      return "nums Array must only contain 0s and 1s" unless nums.all? { |el| el == 0 || el == 1 }
      return "k Int must be 0 or larger and less than the length of nums Array" unless 0 <= k && k <= nums.length

      # Keep track of the max consecutive length found, a start_index and end_index of the current sub-Array
      # being assessed, and the number of flipped zeroes of the current sub-Array being assessed. Increment
      # the end_index by one while passing through the Array once by using each_with_index.
      # Check the Integer at the end_index. If it's 0, increment the number of flipped zeroes by one.
      # If the number of flipped zeroes is now greater than the number of allowed flips (k), adjust the
      # start_index until we have the max allowable flipped_zeroes within the current sub-Array being assessed.
      # Update the max consecutive length if we've found a new max consecutive length.
      max_consecutive = start_index = flipped_zeroes = 0

      nums.each_with_index do |num, end_index|
          if num == 0
              flipped_zeroes += 1

              while flipped_zeroes > k
                  if nums[start_index] == 0
                      flipped_zeroes -= 1
                  end
                  start_index += 1
              end
          end

          current_consecutive = end_index - start_index + 1
          max_consecutive = [max_consecutive, current_consecutive].max
      end

      return max_consecutive
  end

35. Search Insert Position

  Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

  You must write an algorithm with O(log n) runtime complexity.

  Example 1:
    Input: nums = [1,3,5,6], target = 5
    Output: 2
  Example 2:
    Input: nums = [1,3,5,6], target = 2
    Output: 1
  Example 3:
    Input: nums = [1,3,5,6], target = 7
    Output: 4

  Constraints:
    1 <= nums.length <= 104
    -104 <= nums[i] <= 104
    nums contains distinct values sorted in ascending order.
    -104 <= target <= 104

  #########################
  # @param {Integer[]} nums
  # @param {Integer} target
  # @return {Integer}
  def search_insert(nums, target)
    # Variables left_index and right_index keep track of the current search range within
    # the sorted Array, starting with the first and last indexes of the Array.
    left_index = 0
    right_index = nums.length - 1

    # While the left index is smaller than or equal to the right index:
    # calculate the middle_index of the current search range of the Array,
    # compare the num at the middle_index to the target,
    # if the number at the middle_index is the target then return that index,
    # elsif the number at the middle_index is larger than the target then move the
    #   right_index to one left of the middle_index to search the left half of the search range next
    # elsif the number at the middle_index is smaller than the target then move the
    #   left_index to one right of the middle_index to search the right half of the search range next.
    while left_index <= right_index
        middle_index = (left_index + right_index) / 2

        if nums[middle_index] == target
            return middle_index
        elsif nums[middle_index] > target
            right_index = middle_index - 1
        elsif nums[middle_index] < target
            left_index = middle_index + 1
        end
    end

    # If the while loop exits without finding the target, return the left_index
    return left_index
  end